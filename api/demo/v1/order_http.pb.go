// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v5.26.1
// source: demo/v1/order.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrderServiceConfirmOrder = "/v1.OrderService/ConfirmOrder"
const OperationOrderServiceCreateOrder = "/v1.OrderService/CreateOrder"
const OperationOrderServiceOrderInfo = "/v1.OrderService/OrderInfo"
const OperationOrderServiceOrderList = "/v1.OrderService/OrderList"
const OperationOrderServicePayOrder = "/v1.OrderService/PayOrder"

type OrderServiceHTTPServer interface {
	// ConfirmOrder确认订单
	ConfirmOrder(context.Context, *ConfirmOrderRequest) (*ConfirmOrderReply, error)
	// CreateOrder提交订单
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderReply, error)
	// OrderInfo订单详情
	OrderInfo(context.Context, *OrderInfoRequest) (*OrderInfoReply, error)
	// OrderList订单列表
	OrderList(context.Context, *OrderListRequest) (*OrderListReply, error)
	// PayOrder支付订单
	PayOrder(context.Context, *PayOrderRequest) (*PayOrderReply, error)
}

func RegisterOrderServiceHTTPServer(s *http.Server, srv OrderServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/shopapi/v1/order/confirmOrder", _OrderService_ConfirmOrder0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/order/createOrder", _OrderService_CreateOrder0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/order/payOrder", _OrderService_PayOrder0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/order/orderInfo", _OrderService_OrderInfo0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/order/orderList", _OrderService_OrderList0_HTTP_Handler(srv))
}

func _OrderService_ConfirmOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfirmOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceConfirmOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfirmOrder(ctx, req.(*ConfirmOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfirmOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OrderService_CreateOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OrderService_PayOrder0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PayOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServicePayOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PayOrder(ctx, req.(*PayOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PayOrderReply)
		return ctx.Result(200, reply)
	}
}

func _OrderService_OrderInfo0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceOrderInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderInfo(ctx, req.(*OrderInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderInfoReply)
		return ctx.Result(200, reply)
	}
}

func _OrderService_OrderList0_HTTP_Handler(srv OrderServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrderServiceOrderList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderList(ctx, req.(*OrderListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderListReply)
		return ctx.Result(200, reply)
	}
}

type OrderServiceHTTPClient interface {
	ConfirmOrder(ctx context.Context, req *ConfirmOrderRequest, opts ...http.CallOption) (rsp *ConfirmOrderReply, err error)
	CreateOrder(ctx context.Context, req *CreateOrderRequest, opts ...http.CallOption) (rsp *CreateOrderReply, err error)
	OrderInfo(ctx context.Context, req *OrderInfoRequest, opts ...http.CallOption) (rsp *OrderInfoReply, err error)
	OrderList(ctx context.Context, req *OrderListRequest, opts ...http.CallOption) (rsp *OrderListReply, err error)
	PayOrder(ctx context.Context, req *PayOrderRequest, opts ...http.CallOption) (rsp *PayOrderReply, err error)
}

type OrderServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOrderServiceHTTPClient(client *http.Client) OrderServiceHTTPClient {
	return &OrderServiceHTTPClientImpl{client}
}

func (c *OrderServiceHTTPClientImpl) ConfirmOrder(ctx context.Context, in *ConfirmOrderRequest, opts ...http.CallOption) (*ConfirmOrderReply, error) {
	var out ConfirmOrderReply
	pattern := "/shopapi/v1/order/confirmOrder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceConfirmOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...http.CallOption) (*CreateOrderReply, error) {
	var out CreateOrderReply
	pattern := "/shopapi/v1/order/createOrder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) OrderInfo(ctx context.Context, in *OrderInfoRequest, opts ...http.CallOption) (*OrderInfoReply, error) {
	var out OrderInfoReply
	pattern := "/shopapi/v1/order/orderInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceOrderInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) OrderList(ctx context.Context, in *OrderListRequest, opts ...http.CallOption) (*OrderListReply, error) {
	var out OrderListReply
	pattern := "/shopapi/v1/order/orderList"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServiceOrderList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrderServiceHTTPClientImpl) PayOrder(ctx context.Context, in *PayOrderRequest, opts ...http.CallOption) (*PayOrderReply, error) {
	var out PayOrderReply
	pattern := "/shopapi/v1/order/payOrder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrderServicePayOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
