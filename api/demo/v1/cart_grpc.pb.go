// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: demo/v1/cart.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cart_CreateCart_FullMethodName         = "/v1.Cart/CreateCart"
	Cart_QuantityUpdateCart_FullMethodName = "/v1.Cart/QuantityUpdateCart"
	Cart_DeleteCart_FullMethodName         = "/v1.Cart/DeleteCart"
	Cart_GetCartQuantity_FullMethodName    = "/v1.Cart/GetCartQuantity"
	Cart_ListCart_FullMethodName           = "/v1.Cart/ListCart"
	Cart_CheckedCart_FullMethodName        = "/v1.Cart/CheckedCart"
	Cart_ChangeCartSkuInfo_FullMethodName  = "/v1.Cart/ChangeCartSkuInfo"
	Cart_ChangeCartSku_FullMethodName      = "/v1.Cart/ChangeCartSku"
)

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	//购物车添加
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartReply, error)
	//购物车数量更新
	QuantityUpdateCart(ctx context.Context, in *QuantityUpdateRequest, opts ...grpc.CallOption) (*QuantityUpdateReply, error)
	//购物车删除
	DeleteCart(ctx context.Context, in *DeleteCartRequest, opts ...grpc.CallOption) (*DeleteCartReply, error)
	//购物车数量
	GetCartQuantity(ctx context.Context, in *GetCartQuantityRequest, opts ...grpc.CallOption) (*GetCartQuantitytReply, error)
	//购物车列表
	ListCart(ctx context.Context, in *ListCartRequest, opts ...grpc.CallOption) (*ListCartReply, error)
	//选中购物车商品【记录用户的选中状态】
	CheckedCart(ctx context.Context, in *CheckedCartRequest, opts ...grpc.CallOption) (*CheckedCartReply, error)
	//购物车点击规格获取spu详情
	ChangeCartSkuInfo(ctx context.Context, in *ChangeCartSkuInfoRequest, opts ...grpc.CallOption) (*ChangeCartSkuInfoReply, error)
	// //购物车sku更换规格
	ChangeCartSku(ctx context.Context, in *ChangeCartSkuRequest, opts ...grpc.CallOption) (*ChangeCartSkuReply, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CreateCartReply, error) {
	out := new(CreateCartReply)
	err := c.cc.Invoke(ctx, Cart_CreateCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) QuantityUpdateCart(ctx context.Context, in *QuantityUpdateRequest, opts ...grpc.CallOption) (*QuantityUpdateReply, error) {
	out := new(QuantityUpdateReply)
	err := c.cc.Invoke(ctx, Cart_QuantityUpdateCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) DeleteCart(ctx context.Context, in *DeleteCartRequest, opts ...grpc.CallOption) (*DeleteCartReply, error) {
	out := new(DeleteCartReply)
	err := c.cc.Invoke(ctx, Cart_DeleteCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) GetCartQuantity(ctx context.Context, in *GetCartQuantityRequest, opts ...grpc.CallOption) (*GetCartQuantitytReply, error) {
	out := new(GetCartQuantitytReply)
	err := c.cc.Invoke(ctx, Cart_GetCartQuantity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ListCart(ctx context.Context, in *ListCartRequest, opts ...grpc.CallOption) (*ListCartReply, error) {
	out := new(ListCartReply)
	err := c.cc.Invoke(ctx, Cart_ListCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) CheckedCart(ctx context.Context, in *CheckedCartRequest, opts ...grpc.CallOption) (*CheckedCartReply, error) {
	out := new(CheckedCartReply)
	err := c.cc.Invoke(ctx, Cart_CheckedCart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ChangeCartSkuInfo(ctx context.Context, in *ChangeCartSkuInfoRequest, opts ...grpc.CallOption) (*ChangeCartSkuInfoReply, error) {
	out := new(ChangeCartSkuInfoReply)
	err := c.cc.Invoke(ctx, Cart_ChangeCartSkuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) ChangeCartSku(ctx context.Context, in *ChangeCartSkuRequest, opts ...grpc.CallOption) (*ChangeCartSkuReply, error) {
	out := new(ChangeCartSkuReply)
	err := c.cc.Invoke(ctx, Cart_ChangeCartSku_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	//购物车添加
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartReply, error)
	//购物车数量更新
	QuantityUpdateCart(context.Context, *QuantityUpdateRequest) (*QuantityUpdateReply, error)
	//购物车删除
	DeleteCart(context.Context, *DeleteCartRequest) (*DeleteCartReply, error)
	//购物车数量
	GetCartQuantity(context.Context, *GetCartQuantityRequest) (*GetCartQuantitytReply, error)
	//购物车列表
	ListCart(context.Context, *ListCartRequest) (*ListCartReply, error)
	//选中购物车商品【记录用户的选中状态】
	CheckedCart(context.Context, *CheckedCartRequest) (*CheckedCartReply, error)
	//购物车点击规格获取spu详情
	ChangeCartSkuInfo(context.Context, *ChangeCartSkuInfoRequest) (*ChangeCartSkuInfoReply, error)
	// //购物车sku更换规格
	ChangeCartSku(context.Context, *ChangeCartSkuRequest) (*ChangeCartSkuReply, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) CreateCart(context.Context, *CreateCartRequest) (*CreateCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedCartServer) QuantityUpdateCart(context.Context, *QuantityUpdateRequest) (*QuantityUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuantityUpdateCart not implemented")
}
func (UnimplementedCartServer) DeleteCart(context.Context, *DeleteCartRequest) (*DeleteCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCart not implemented")
}
func (UnimplementedCartServer) GetCartQuantity(context.Context, *GetCartQuantityRequest) (*GetCartQuantitytReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartQuantity not implemented")
}
func (UnimplementedCartServer) ListCart(context.Context, *ListCartRequest) (*ListCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCart not implemented")
}
func (UnimplementedCartServer) CheckedCart(context.Context, *CheckedCartRequest) (*CheckedCartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckedCart not implemented")
}
func (UnimplementedCartServer) ChangeCartSkuInfo(context.Context, *ChangeCartSkuInfoRequest) (*ChangeCartSkuInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCartSkuInfo not implemented")
}
func (UnimplementedCartServer) ChangeCartSku(context.Context, *ChangeCartSkuRequest) (*ChangeCartSkuReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCartSku not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_CreateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_QuantityUpdateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuantityUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).QuantityUpdateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_QuantityUpdateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).QuantityUpdateCart(ctx, req.(*QuantityUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_DeleteCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).DeleteCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_DeleteCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).DeleteCart(ctx, req.(*DeleteCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_GetCartQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).GetCartQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_GetCartQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).GetCartQuantity(ctx, req.(*GetCartQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ListCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ListCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_ListCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ListCart(ctx, req.(*ListCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_CheckedCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckedCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).CheckedCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_CheckedCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).CheckedCart(ctx, req.(*CheckedCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ChangeCartSkuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCartSkuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ChangeCartSkuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_ChangeCartSkuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ChangeCartSkuInfo(ctx, req.(*ChangeCartSkuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_ChangeCartSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCartSkuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).ChangeCartSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cart_ChangeCartSku_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).ChangeCartSku(ctx, req.(*ChangeCartSkuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _Cart_CreateCart_Handler,
		},
		{
			MethodName: "QuantityUpdateCart",
			Handler:    _Cart_QuantityUpdateCart_Handler,
		},
		{
			MethodName: "DeleteCart",
			Handler:    _Cart_DeleteCart_Handler,
		},
		{
			MethodName: "GetCartQuantity",
			Handler:    _Cart_GetCartQuantity_Handler,
		},
		{
			MethodName: "ListCart",
			Handler:    _Cart_ListCart_Handler,
		},
		{
			MethodName: "CheckedCart",
			Handler:    _Cart_CheckedCart_Handler,
		},
		{
			MethodName: "ChangeCartSkuInfo",
			Handler:    _Cart_ChangeCartSkuInfo_Handler,
		},
		{
			MethodName: "ChangeCartSku",
			Handler:    _Cart_ChangeCartSku_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo/v1/cart.proto",
}
