// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v5.26.1
// source: demo/v1/cart.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCartChangeCartSku = "/v1.Cart/ChangeCartSku"
const OperationCartChangeCartSkuInfo = "/v1.Cart/ChangeCartSkuInfo"
const OperationCartCheckedCart = "/v1.Cart/CheckedCart"
const OperationCartCreateCart = "/v1.Cart/CreateCart"
const OperationCartDeleteCart = "/v1.Cart/DeleteCart"
const OperationCartGetCartQuantity = "/v1.Cart/GetCartQuantity"
const OperationCartListCart = "/v1.Cart/ListCart"
const OperationCartQuantityUpdateCart = "/v1.Cart/QuantityUpdateCart"

type CartHTTPServer interface {
	// ChangeCartSku //购物车sku更换规格
	ChangeCartSku(context.Context, *ChangeCartSkuRequest) (*ChangeCartSkuReply, error)
	// ChangeCartSkuInfo购物车点击规格获取spu详情
	ChangeCartSkuInfo(context.Context, *ChangeCartSkuInfoRequest) (*ChangeCartSkuInfoReply, error)
	// CheckedCart选中购物车商品【记录用户的选中状态】
	CheckedCart(context.Context, *CheckedCartRequest) (*CheckedCartReply, error)
	// CreateCart购物车添加
	CreateCart(context.Context, *CreateCartRequest) (*CreateCartReply, error)
	// DeleteCart购物车删除
	DeleteCart(context.Context, *DeleteCartRequest) (*DeleteCartReply, error)
	// GetCartQuantity购物车数量
	GetCartQuantity(context.Context, *GetCartQuantityRequest) (*GetCartQuantitytReply, error)
	// ListCart购物车列表
	ListCart(context.Context, *ListCartRequest) (*ListCartReply, error)
	// QuantityUpdateCart购物车数量更新
	QuantityUpdateCart(context.Context, *QuantityUpdateRequest) (*QuantityUpdateReply, error)
}

func RegisterCartHTTPServer(s *http.Server, srv CartHTTPServer) {
	r := s.Route("/")
	r.POST("/shopapi/v2/cart/add", _Cart_CreateCart0_HTTP_Handler(srv))
	r.POST("/shopapi/v2/cart/quantity-update", _Cart_QuantityUpdateCart0_HTTP_Handler(srv))
	r.POST("/shopapi/v2/cart/remove", _Cart_DeleteCart0_HTTP_Handler(srv))
	r.POST("/shopapi/v2/cart/quantity", _Cart_GetCartQuantity0_HTTP_Handler(srv))
	r.POST("/shopapi/v2/cart/list", _Cart_ListCart0_HTTP_Handler(srv))
	r.POST("/shopapi/v2/cart/checked", _Cart_CheckedCart0_HTTP_Handler(srv))
	r.POST("/shopapi/v2/cart/change-sku-info", _Cart_ChangeCartSkuInfo0_HTTP_Handler(srv))
	r.POST("/shopapi/v2/cart/change-sku", _Cart_ChangeCartSku0_HTTP_Handler(srv))
}

func _Cart_CreateCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartCreateCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCart(ctx, req.(*CreateCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_QuantityUpdateCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QuantityUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartQuantityUpdateCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.QuantityUpdateCart(ctx, req.(*QuantityUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuantityUpdateReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_DeleteCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartDeleteCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCart(ctx, req.(*DeleteCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_GetCartQuantity0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCartQuantityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartGetCartQuantity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCartQuantity(ctx, req.(*GetCartQuantityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCartQuantitytReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_ListCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartListCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCart(ctx, req.(*ListCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_CheckedCart0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckedCartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartCheckedCart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckedCart(ctx, req.(*CheckedCartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckedCartReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_ChangeCartSkuInfo0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeCartSkuInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartChangeCartSkuInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeCartSkuInfo(ctx, req.(*ChangeCartSkuInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeCartSkuInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Cart_ChangeCartSku0_HTTP_Handler(srv CartHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangeCartSkuRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCartChangeCartSku)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangeCartSku(ctx, req.(*ChangeCartSkuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChangeCartSkuReply)
		return ctx.Result(200, reply)
	}
}

type CartHTTPClient interface {
	ChangeCartSku(ctx context.Context, req *ChangeCartSkuRequest, opts ...http.CallOption) (rsp *ChangeCartSkuReply, err error)
	ChangeCartSkuInfo(ctx context.Context, req *ChangeCartSkuInfoRequest, opts ...http.CallOption) (rsp *ChangeCartSkuInfoReply, err error)
	CheckedCart(ctx context.Context, req *CheckedCartRequest, opts ...http.CallOption) (rsp *CheckedCartReply, err error)
	CreateCart(ctx context.Context, req *CreateCartRequest, opts ...http.CallOption) (rsp *CreateCartReply, err error)
	DeleteCart(ctx context.Context, req *DeleteCartRequest, opts ...http.CallOption) (rsp *DeleteCartReply, err error)
	GetCartQuantity(ctx context.Context, req *GetCartQuantityRequest, opts ...http.CallOption) (rsp *GetCartQuantitytReply, err error)
	ListCart(ctx context.Context, req *ListCartRequest, opts ...http.CallOption) (rsp *ListCartReply, err error)
	QuantityUpdateCart(ctx context.Context, req *QuantityUpdateRequest, opts ...http.CallOption) (rsp *QuantityUpdateReply, err error)
}

type CartHTTPClientImpl struct {
	cc *http.Client
}

func NewCartHTTPClient(client *http.Client) CartHTTPClient {
	return &CartHTTPClientImpl{client}
}

func (c *CartHTTPClientImpl) ChangeCartSku(ctx context.Context, in *ChangeCartSkuRequest, opts ...http.CallOption) (*ChangeCartSkuReply, error) {
	var out ChangeCartSkuReply
	pattern := "/shopapi/v2/cart/change-sku"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartChangeCartSku))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) ChangeCartSkuInfo(ctx context.Context, in *ChangeCartSkuInfoRequest, opts ...http.CallOption) (*ChangeCartSkuInfoReply, error) {
	var out ChangeCartSkuInfoReply
	pattern := "/shopapi/v2/cart/change-sku-info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartChangeCartSkuInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) CheckedCart(ctx context.Context, in *CheckedCartRequest, opts ...http.CallOption) (*CheckedCartReply, error) {
	var out CheckedCartReply
	pattern := "/shopapi/v2/cart/checked"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartCheckedCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...http.CallOption) (*CreateCartReply, error) {
	var out CreateCartReply
	pattern := "/shopapi/v2/cart/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartCreateCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) DeleteCart(ctx context.Context, in *DeleteCartRequest, opts ...http.CallOption) (*DeleteCartReply, error) {
	var out DeleteCartReply
	pattern := "/shopapi/v2/cart/remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartDeleteCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) GetCartQuantity(ctx context.Context, in *GetCartQuantityRequest, opts ...http.CallOption) (*GetCartQuantitytReply, error) {
	var out GetCartQuantitytReply
	pattern := "/shopapi/v2/cart/quantity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartGetCartQuantity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) ListCart(ctx context.Context, in *ListCartRequest, opts ...http.CallOption) (*ListCartReply, error) {
	var out ListCartReply
	pattern := "/shopapi/v2/cart/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartListCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CartHTTPClientImpl) QuantityUpdateCart(ctx context.Context, in *QuantityUpdateRequest, opts ...http.CallOption) (*QuantityUpdateReply, error) {
	var out QuantityUpdateReply
	pattern := "/shopapi/v2/cart/quantity-update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCartQuantityUpdateCart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
