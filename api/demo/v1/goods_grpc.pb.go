// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: demo/v1/goods.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoodsService_SpuList_FullMethodName         = "/v1.GoodsService/SpuList"
	GoodsService_SpuInfo_FullMethodName         = "/v1.GoodsService/SpuInfo"
	GoodsService_BatchSpuInfo_FullMethodName    = "/v1.GoodsService/BatchSpuInfo"
	GoodsService_SkuInfo_FullMethodName         = "/v1.GoodsService/SkuInfo"
	GoodsService_BatchSkuInfo_FullMethodName    = "/v1.GoodsService/BatchSkuInfo"
	GoodsService_SpuAcitvityInfo_FullMethodName = "/v1.GoodsService/SpuAcitvityInfo"
)

// GoodsServiceClient is the client API for GoodsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsServiceClient interface {
	//商品列表
	SpuList(ctx context.Context, in *SpuListRequest, opts ...grpc.CallOption) (*SpuListReply, error)
	//商品Spu信息
	SpuInfo(ctx context.Context, in *SpuInfoRequest, opts ...grpc.CallOption) (*SpuInfoReply, error)
	//批量spu信息
	BatchSpuInfo(ctx context.Context, in *BatchSpuInfoRequest, opts ...grpc.CallOption) (*BatchSpuInfoReply, error)
	//商品Sku信息
	SkuInfo(ctx context.Context, in *SkuInfoRequest, opts ...grpc.CallOption) (*SkuInfoReply, error)
	//批量sku信息
	BatchSkuInfo(ctx context.Context, in *BatchSkuInfoRequest, opts ...grpc.CallOption) (*BatchSkuInfoReply, error)
	//商品活动信息
	SpuAcitvityInfo(ctx context.Context, in *SpuAcitvityInfoRequest, opts ...grpc.CallOption) (*SpuAcitvityInfoReply, error)
}

type goodsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsServiceClient(cc grpc.ClientConnInterface) GoodsServiceClient {
	return &goodsServiceClient{cc}
}

func (c *goodsServiceClient) SpuList(ctx context.Context, in *SpuListRequest, opts ...grpc.CallOption) (*SpuListReply, error) {
	out := new(SpuListReply)
	err := c.cc.Invoke(ctx, GoodsService_SpuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) SpuInfo(ctx context.Context, in *SpuInfoRequest, opts ...grpc.CallOption) (*SpuInfoReply, error) {
	out := new(SpuInfoReply)
	err := c.cc.Invoke(ctx, GoodsService_SpuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) BatchSpuInfo(ctx context.Context, in *BatchSpuInfoRequest, opts ...grpc.CallOption) (*BatchSpuInfoReply, error) {
	out := new(BatchSpuInfoReply)
	err := c.cc.Invoke(ctx, GoodsService_BatchSpuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) SkuInfo(ctx context.Context, in *SkuInfoRequest, opts ...grpc.CallOption) (*SkuInfoReply, error) {
	out := new(SkuInfoReply)
	err := c.cc.Invoke(ctx, GoodsService_SkuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) BatchSkuInfo(ctx context.Context, in *BatchSkuInfoRequest, opts ...grpc.CallOption) (*BatchSkuInfoReply, error) {
	out := new(BatchSkuInfoReply)
	err := c.cc.Invoke(ctx, GoodsService_BatchSkuInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsServiceClient) SpuAcitvityInfo(ctx context.Context, in *SpuAcitvityInfoRequest, opts ...grpc.CallOption) (*SpuAcitvityInfoReply, error) {
	out := new(SpuAcitvityInfoReply)
	err := c.cc.Invoke(ctx, GoodsService_SpuAcitvityInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServiceServer is the server API for GoodsService service.
// All implementations must embed UnimplementedGoodsServiceServer
// for forward compatibility
type GoodsServiceServer interface {
	//商品列表
	SpuList(context.Context, *SpuListRequest) (*SpuListReply, error)
	//商品Spu信息
	SpuInfo(context.Context, *SpuInfoRequest) (*SpuInfoReply, error)
	//批量spu信息
	BatchSpuInfo(context.Context, *BatchSpuInfoRequest) (*BatchSpuInfoReply, error)
	//商品Sku信息
	SkuInfo(context.Context, *SkuInfoRequest) (*SkuInfoReply, error)
	//批量sku信息
	BatchSkuInfo(context.Context, *BatchSkuInfoRequest) (*BatchSkuInfoReply, error)
	//商品活动信息
	SpuAcitvityInfo(context.Context, *SpuAcitvityInfoRequest) (*SpuAcitvityInfoReply, error)
	mustEmbedUnimplementedGoodsServiceServer()
}

// UnimplementedGoodsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServiceServer struct {
}

func (UnimplementedGoodsServiceServer) SpuList(context.Context, *SpuListRequest) (*SpuListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpuList not implemented")
}
func (UnimplementedGoodsServiceServer) SpuInfo(context.Context, *SpuInfoRequest) (*SpuInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpuInfo not implemented")
}
func (UnimplementedGoodsServiceServer) BatchSpuInfo(context.Context, *BatchSpuInfoRequest) (*BatchSpuInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSpuInfo not implemented")
}
func (UnimplementedGoodsServiceServer) SkuInfo(context.Context, *SkuInfoRequest) (*SkuInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkuInfo not implemented")
}
func (UnimplementedGoodsServiceServer) BatchSkuInfo(context.Context, *BatchSkuInfoRequest) (*BatchSkuInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSkuInfo not implemented")
}
func (UnimplementedGoodsServiceServer) SpuAcitvityInfo(context.Context, *SpuAcitvityInfoRequest) (*SpuAcitvityInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpuAcitvityInfo not implemented")
}
func (UnimplementedGoodsServiceServer) mustEmbedUnimplementedGoodsServiceServer() {}

// UnsafeGoodsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServiceServer will
// result in compilation errors.
type UnsafeGoodsServiceServer interface {
	mustEmbedUnimplementedGoodsServiceServer()
}

func RegisterGoodsServiceServer(s grpc.ServiceRegistrar, srv GoodsServiceServer) {
	s.RegisterService(&GoodsService_ServiceDesc, srv)
}

func _GoodsService_SpuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).SpuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_SpuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).SpuList(ctx, req.(*SpuListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_SpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).SpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_SpuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).SpuInfo(ctx, req.(*SpuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_BatchSpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSpuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).BatchSpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_BatchSpuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).BatchSpuInfo(ctx, req.(*BatchSpuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_SkuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).SkuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_SkuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).SkuInfo(ctx, req.(*SkuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_BatchSkuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSkuInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).BatchSkuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_BatchSkuInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).BatchSkuInfo(ctx, req.(*BatchSkuInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsService_SpuAcitvityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuAcitvityInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServiceServer).SpuAcitvityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodsService_SpuAcitvityInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServiceServer).SpuAcitvityInfo(ctx, req.(*SpuAcitvityInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsService_ServiceDesc is the grpc.ServiceDesc for GoodsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GoodsService",
	HandlerType: (*GoodsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpuList",
			Handler:    _GoodsService_SpuList_Handler,
		},
		{
			MethodName: "SpuInfo",
			Handler:    _GoodsService_SpuInfo_Handler,
		},
		{
			MethodName: "BatchSpuInfo",
			Handler:    _GoodsService_BatchSpuInfo_Handler,
		},
		{
			MethodName: "SkuInfo",
			Handler:    _GoodsService_SkuInfo_Handler,
		},
		{
			MethodName: "BatchSkuInfo",
			Handler:    _GoodsService_BatchSkuInfo_Handler,
		},
		{
			MethodName: "SpuAcitvityInfo",
			Handler:    _GoodsService_SpuAcitvityInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo/v1/goods.proto",
}
