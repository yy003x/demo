// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v5.26.1
// source: demo/v1/goods.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGoodsServiceBatchSkuInfo = "/v1.GoodsService/BatchSkuInfo"
const OperationGoodsServiceBatchSpuInfo = "/v1.GoodsService/BatchSpuInfo"
const OperationGoodsServiceSkuInfo = "/v1.GoodsService/SkuInfo"
const OperationGoodsServiceSpuAcitvityInfo = "/v1.GoodsService/SpuAcitvityInfo"
const OperationGoodsServiceSpuInfo = "/v1.GoodsService/SpuInfo"
const OperationGoodsServiceSpuList = "/v1.GoodsService/SpuList"

type GoodsServiceHTTPServer interface {
	// BatchSkuInfo批量sku信息
	BatchSkuInfo(context.Context, *BatchSkuInfoRequest) (*BatchSkuInfoReply, error)
	// BatchSpuInfo批量spu信息
	BatchSpuInfo(context.Context, *BatchSpuInfoRequest) (*BatchSpuInfoReply, error)
	// SkuInfo商品Sku信息
	SkuInfo(context.Context, *SkuInfoRequest) (*SkuInfoReply, error)
	// SpuAcitvityInfo商品活动信息
	SpuAcitvityInfo(context.Context, *SpuAcitvityInfoRequest) (*SpuAcitvityInfoReply, error)
	// SpuInfo商品Spu信息
	SpuInfo(context.Context, *SpuInfoRequest) (*SpuInfoReply, error)
	// SpuList商品列表
	SpuList(context.Context, *SpuListRequest) (*SpuListReply, error)
}

func RegisterGoodsServiceHTTPServer(s *http.Server, srv GoodsServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/shopapi/v1/goods/spuList", _GoodsService_SpuList0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/goods/spuInfo", _GoodsService_SpuInfo0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/goods/batchSpuInfo", _GoodsService_BatchSpuInfo0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/goods/skuInfo", _GoodsService_SkuInfo0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/goods/batchSkuInfo", _GoodsService_BatchSkuInfo0_HTTP_Handler(srv))
	r.POST("/shopapi/v2/goods/spuAcitvityInfo", _GoodsService_SpuAcitvityInfo0_HTTP_Handler(srv))
}

func _GoodsService_SpuList0_HTTP_Handler(srv GoodsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpuListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsServiceSpuList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpuList(ctx, req.(*SpuListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpuListReply)
		return ctx.Result(200, reply)
	}
}

func _GoodsService_SpuInfo0_HTTP_Handler(srv GoodsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpuInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsServiceSpuInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpuInfo(ctx, req.(*SpuInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpuInfoReply)
		return ctx.Result(200, reply)
	}
}

func _GoodsService_BatchSpuInfo0_HTTP_Handler(srv GoodsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchSpuInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsServiceBatchSpuInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchSpuInfo(ctx, req.(*BatchSpuInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchSpuInfoReply)
		return ctx.Result(200, reply)
	}
}

func _GoodsService_SkuInfo0_HTTP_Handler(srv GoodsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SkuInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsServiceSkuInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SkuInfo(ctx, req.(*SkuInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SkuInfoReply)
		return ctx.Result(200, reply)
	}
}

func _GoodsService_BatchSkuInfo0_HTTP_Handler(srv GoodsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchSkuInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsServiceBatchSkuInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchSkuInfo(ctx, req.(*BatchSkuInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchSkuInfoReply)
		return ctx.Result(200, reply)
	}
}

func _GoodsService_SpuAcitvityInfo0_HTTP_Handler(srv GoodsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SpuAcitvityInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGoodsServiceSpuAcitvityInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SpuAcitvityInfo(ctx, req.(*SpuAcitvityInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SpuAcitvityInfoReply)
		return ctx.Result(200, reply)
	}
}

type GoodsServiceHTTPClient interface {
	BatchSkuInfo(ctx context.Context, req *BatchSkuInfoRequest, opts ...http.CallOption) (rsp *BatchSkuInfoReply, err error)
	BatchSpuInfo(ctx context.Context, req *BatchSpuInfoRequest, opts ...http.CallOption) (rsp *BatchSpuInfoReply, err error)
	SkuInfo(ctx context.Context, req *SkuInfoRequest, opts ...http.CallOption) (rsp *SkuInfoReply, err error)
	SpuAcitvityInfo(ctx context.Context, req *SpuAcitvityInfoRequest, opts ...http.CallOption) (rsp *SpuAcitvityInfoReply, err error)
	SpuInfo(ctx context.Context, req *SpuInfoRequest, opts ...http.CallOption) (rsp *SpuInfoReply, err error)
	SpuList(ctx context.Context, req *SpuListRequest, opts ...http.CallOption) (rsp *SpuListReply, err error)
}

type GoodsServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewGoodsServiceHTTPClient(client *http.Client) GoodsServiceHTTPClient {
	return &GoodsServiceHTTPClientImpl{client}
}

func (c *GoodsServiceHTTPClientImpl) BatchSkuInfo(ctx context.Context, in *BatchSkuInfoRequest, opts ...http.CallOption) (*BatchSkuInfoReply, error) {
	var out BatchSkuInfoReply
	pattern := "/shopapi/v1/goods/batchSkuInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsServiceBatchSkuInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GoodsServiceHTTPClientImpl) BatchSpuInfo(ctx context.Context, in *BatchSpuInfoRequest, opts ...http.CallOption) (*BatchSpuInfoReply, error) {
	var out BatchSpuInfoReply
	pattern := "/shopapi/v1/goods/batchSpuInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsServiceBatchSpuInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GoodsServiceHTTPClientImpl) SkuInfo(ctx context.Context, in *SkuInfoRequest, opts ...http.CallOption) (*SkuInfoReply, error) {
	var out SkuInfoReply
	pattern := "/shopapi/v1/goods/skuInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsServiceSkuInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GoodsServiceHTTPClientImpl) SpuAcitvityInfo(ctx context.Context, in *SpuAcitvityInfoRequest, opts ...http.CallOption) (*SpuAcitvityInfoReply, error) {
	var out SpuAcitvityInfoReply
	pattern := "/shopapi/v2/goods/spuAcitvityInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsServiceSpuAcitvityInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GoodsServiceHTTPClientImpl) SpuInfo(ctx context.Context, in *SpuInfoRequest, opts ...http.CallOption) (*SpuInfoReply, error) {
	var out SpuInfoReply
	pattern := "/shopapi/v1/goods/spuInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsServiceSpuInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GoodsServiceHTTPClientImpl) SpuList(ctx context.Context, in *SpuListRequest, opts ...http.CallOption) (*SpuListReply, error) {
	var out SpuListReply
	pattern := "/shopapi/v1/goods/spuList"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGoodsServiceSpuList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
