// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v5.26.1
// source: demo/v1/activity.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationActivityServiceActivityInfo = "/v1.ActivityService/ActivityInfo"
const OperationActivityServiceActivityList = "/v1.ActivityService/ActivityList"
const OperationActivityServiceBatchActivityInfo = "/v1.ActivityService/BatchActivityInfo"
const OperationActivityServiceCreateActivity = "/v1.ActivityService/CreateActivity"
const OperationActivityServiceUpdateActivity = "/v1.ActivityService/UpdateActivity"

type ActivityServiceHTTPServer interface {
	ActivityInfo(context.Context, *ActivityInfoRequest) (*ActivityInfoReply, error)
	ActivityList(context.Context, *ActivityListRequest) (*ActivityListReply, error)
	BatchActivityInfo(context.Context, *BatchActivityInfoRequest) (*BatchActivityInfoReply, error)
	CreateActivity(context.Context, *CreateActivityRequest) (*CreateActivityReply, error)
	UpdateActivity(context.Context, *UpdateActivityRequest) (*UpdateActivityReply, error)
}

func RegisterActivityServiceHTTPServer(s *http.Server, srv ActivityServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/shopapi/v1/activity/createActivity", _ActivityService_CreateActivity0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/activity/updateActivity", _ActivityService_UpdateActivity0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/activity/activityList", _ActivityService_ActivityList0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/activity/activityInfo", _ActivityService_ActivityInfo0_HTTP_Handler(srv))
	r.POST("/shopapi/v1/activity/batchActivityInfo", _ActivityService_BatchActivityInfo0_HTTP_Handler(srv))
}

func _ActivityService_CreateActivity0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceCreateActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateActivity(ctx, req.(*CreateActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateActivityReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_UpdateActivity0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceUpdateActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateActivity(ctx, req.(*UpdateActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateActivityReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_ActivityList0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivityListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceActivityList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ActivityList(ctx, req.(*ActivityListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityListReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_ActivityInfo0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActivityInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceActivityInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ActivityInfo(ctx, req.(*ActivityInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActivityInfoReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_BatchActivityInfo0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchActivityInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceBatchActivityInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchActivityInfo(ctx, req.(*BatchActivityInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchActivityInfoReply)
		return ctx.Result(200, reply)
	}
}

type ActivityServiceHTTPClient interface {
	ActivityInfo(ctx context.Context, req *ActivityInfoRequest, opts ...http.CallOption) (rsp *ActivityInfoReply, err error)
	ActivityList(ctx context.Context, req *ActivityListRequest, opts ...http.CallOption) (rsp *ActivityListReply, err error)
	BatchActivityInfo(ctx context.Context, req *BatchActivityInfoRequest, opts ...http.CallOption) (rsp *BatchActivityInfoReply, err error)
	CreateActivity(ctx context.Context, req *CreateActivityRequest, opts ...http.CallOption) (rsp *CreateActivityReply, err error)
	UpdateActivity(ctx context.Context, req *UpdateActivityRequest, opts ...http.CallOption) (rsp *UpdateActivityReply, err error)
}

type ActivityServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewActivityServiceHTTPClient(client *http.Client) ActivityServiceHTTPClient {
	return &ActivityServiceHTTPClientImpl{client}
}

func (c *ActivityServiceHTTPClientImpl) ActivityInfo(ctx context.Context, in *ActivityInfoRequest, opts ...http.CallOption) (*ActivityInfoReply, error) {
	var out ActivityInfoReply
	pattern := "/shopapi/v1/activity/activityInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityServiceActivityInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ActivityServiceHTTPClientImpl) ActivityList(ctx context.Context, in *ActivityListRequest, opts ...http.CallOption) (*ActivityListReply, error) {
	var out ActivityListReply
	pattern := "/shopapi/v1/activity/activityList"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityServiceActivityList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ActivityServiceHTTPClientImpl) BatchActivityInfo(ctx context.Context, in *BatchActivityInfoRequest, opts ...http.CallOption) (*BatchActivityInfoReply, error) {
	var out BatchActivityInfoReply
	pattern := "/shopapi/v1/activity/batchActivityInfo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityServiceBatchActivityInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ActivityServiceHTTPClientImpl) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...http.CallOption) (*CreateActivityReply, error) {
	var out CreateActivityReply
	pattern := "/shopapi/v1/activity/createActivity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityServiceCreateActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ActivityServiceHTTPClientImpl) UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...http.CallOption) (*UpdateActivityReply, error) {
	var out UpdateActivityReply
	pattern := "/shopapi/v1/activity/updateActivity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityServiceUpdateActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
